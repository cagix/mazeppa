main(stmt) := eval(stmt);

eval(stmt) := match stmt {
    If1(cond, then, else) -> match decide(cond) {
        T() -> eval(then),
        F() -> eval(else)
    },
    If2(cond, then, else) -> match decide(cond) {
        T() -> eval(then),
        F() -> eval(else)
    }
};

// This function will be transformed because the last two branches are
// productive, so deforestation is possible.
decide(t) := match t {
    Var(env, x) -> fetchCell(env, x),
    T() -> T(),
    F() -> F()
};

// This function will be extracted because it is not productive.
fetchCell(env, x) := match env {
    Nil() -> Panic(++("the variable is unbound: ", x)),
    Cell(y, value, xs) -> match =(x, y) {
        T() -> value,
        F() -> fetchCell(xs, x)
    }
};
