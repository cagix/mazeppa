[
  [
    [ ".f0", [ "input" ], "eval(Nil(), FCall(\"sum\", Cons(input, Nil())))" ],
    [ ".f1", [ "args", "c" ], "CCall(c, args)" ],
    [ ".f10", [ "u", "t", "x" ], "Let(x, t, u)" ],
    [ ".f11", [ "t", "env", "u", "x" ], ".f10(subst(env, u), t, x)" ],
    [ ".f2", [ "tVal", "env", "u", "x" ], "eval(Cell(x, tVal, env), u)" ],
    [ ".f3", [ "args", "f" ], "FCall(f, args)" ],
    [ ".f4", [ "args", "c" ], "CCall(c, args)" ],
    [ ".f5", [ "t", "op" ], "Op1(op, t)" ],
    [ ".f6", [ "t2", "op", "t1" ], "Op2(t1, op, t2)" ],
    [ ".f7", [ "t1", "env", "op", "t2" ], ".f6(subst(env, t2), op, t1)" ],
    [ ".f8", [ "cases", "t" ], "Match(t, cases)" ],
    [ ".f9", [ "t", "cases", "env" ], ".f8(substCases(env, cases), t)" ],
    [ "bind", [ "env", "params", "args" ], ".g19(params, args, env)" ],
    [ "booleanOf", [ "boolean" ], ".g12(boolean)" ],
    [
      "caseOf", [ "c", "params", "t", "cases" ], "Case(c, params, t, cases)"
    ],
    [ "cellOf", [ "x", "tVal", "env" ], "Cell(x, tVal, env)" ],
    [ "cons", [ "x", "xs" ], "CCall(\"Cons\", Cons(x, Cons(xs, Nil())))" ],
    [ "consOf", [ "x", "xs" ], "Cons(x, xs)" ],
    [ "constOf", [ "const" ], "Const(const)" ],
    [ "eval", [ "env", "t" ], ".g6(t, env)" ],
    [ "evalArgs", [ "env", "params", "args" ], ".g8(params, args, env)" ],
    [ "evalOp1", [ "op", "tVal" ], ".g10(op, tVal)" ],
    [ "evalOp2", [ "t1Val", "op", "t2Val" ], ".g11(op, t1Val, t2Val)" ],
    [ "findCaseDef", [ "c", "cases" ], ".g23(cases, c)" ],
    [ "findRuleDef", [ "f" ], "findRuleDefAux(f, program())" ],
    [ "findRuleDefAux", [ "f", "rules" ], ".g21(rules, f)" ],
    [ "lookup", [ "env", "x" ], ".g17(env, x)" ],
    [
      "main", [],
      ".f0(cons(Const(1i32), cons(Const(2i32), cons(Const(3i32), cons(Const(4i32), cons(Const(5i32), nil()))))))"
    ],
    [ "nil", [], "CCall(\"Nil\", Nil())" ],
    [
      "program", [],
      "Rule(\"sum\", Cons(\"xs\", Nil()), Match(Var(\"xs\"), Case(\"Nil\", Nil(), Const(0i32), Case(\"Cons\", Cons(\"x\", Cons(\"xs\", Nil())), Op2(Var(\"x\"), Add(), FCall(\"sum\", Cons(Var(\"xs\"), Nil()))), Nil()))), Nil())"
    ],
    [ "subst", [ "env", "t" ], ".g13(t, env)" ],
    [ "substArgs", [ "env", "args" ], ".g14(args, env)" ],
    [ "substCases", [ "env", "cases" ], ".g15(cases, env)" ]
  ],
  [
    [
      ".g0",
      [
        [
          "RuleDef",
          [ "params", "body" ],
          [ "args", "env" ],
          "eval(evalArgs(env, params, args), body)"
        ]
      ]
    ],
    [ ".g1", [ [ "Const", [ "tVal" ], [ "op" ], "evalOp1(op, tVal)" ] ] ],
    [
      ".g10",
      [
        [ "BitNot", [], [ "tVal" ], "constOf(~(tVal))" ],
        [ "IntOf", [ "ty" ], [ "tVal" ], ".g9(ty, tVal)" ],
        [ "LengthOf", [], [ "tVal" ], "constOf(length(tVal))" ],
        [ "StringOf", [], [ "tVal" ], "constOf(string(tVal))" ],
        [ "StringOfChar", [], [ "tVal" ], "constOf(#(tVal))" ]
      ]
    ],
    [
      ".g11",
      [
        [ "Add", [], [ "t1Val", "t2Val" ], "constOf(+(t1Val, t2Val))" ],
        [ "BitAnd", [], [ "t1Val", "t2Val" ], "constOf(&(t1Val, t2Val))" ],
        [ "BitOr", [], [ "t1Val", "t2Val" ], "constOf(|(t1Val, t2Val))" ],
        [ "BitXor", [], [ "t1Val", "t2Val" ], "constOf(^(t1Val, t2Val))" ],
        [ "CharAt", [], [ "t1Val", "t2Val" ], "constOf(get(t1Val, t2Val))" ],
        [ "Div", [], [ "t1Val", "t2Val" ], "constOf(/(t1Val, t2Val))" ],
        [ "Equal", [], [ "t1Val", "t2Val" ], "booleanOf(=(t1Val, t2Val))" ],
        [
          "GreaterThan",
          [],
          [ "t1Val", "t2Val" ],
          "booleanOf(>(t1Val, t2Val))"
        ],
        [
          "GreaterThanEqual",
          [],
          [ "t1Val", "t2Val" ],
          "booleanOf(>=(t1Val, t2Val))"
        ],
        [
          "LeftShift", [], [ "t1Val", "t2Val" ], "constOf(<<(t1Val, t2Val))"
        ],
        [
          "LessThan", [], [ "t1Val", "t2Val" ], "booleanOf(<(t1Val, t2Val))"
        ],
        [
          "LessThanEqual",
          [],
          [ "t1Val", "t2Val" ],
          "booleanOf(<=(t1Val, t2Val))"
        ],
        [ "Mul", [], [ "t1Val", "t2Val" ], "constOf(*(t1Val, t2Val))" ],
        [
          "NotEqual", [], [ "t1Val", "t2Val" ], "booleanOf(!=(t1Val, t2Val))"
        ],
        [ "PlusPlus", [], [ "t1Val", "t2Val" ], "constOf(++(t1Val, t2Val))" ],
        [ "Rem", [], [ "t1Val", "t2Val" ], "constOf(%(t1Val, t2Val))" ],
        [
          "RightShift", [], [ "t1Val", "t2Val" ], "constOf(>>(t1Val, t2Val))"
        ],
        [ "Sub", [], [ "t1Val", "t2Val" ], "constOf(-(t1Val, t2Val))" ]
      ]
    ],
    [
      ".g12",
      [
        [ "F", [], [], "CCall(\"F\", Nil())" ],
        [ "T", [], [], "CCall(\"T\", Nil())" ]
      ]
    ],
    [
      ".g13",
      [
        [
          "CCall", [ "c", "args" ], [ "env" ], ".f4(substArgs(env, args), c)"
        ],
        [ "Const", [ "const" ], [ "env" ], "Const(const)" ],
        [
          "FCall", [ "f", "args" ], [ "env" ], ".f3(substArgs(env, args), f)"
        ],
        [
          "Let",
          [ "x", "t", "u" ],
          [ "env" ],
          ".f11(subst(env, t), env, u, x)"
        ],
        [
          "Match",
          [ "t", "cases" ],
          [ "env" ],
          ".f9(subst(env, t), cases, env)"
        ],
        [ "Op1", [ "op", "t" ], [ "env" ], ".f5(subst(env, t), op)" ],
        [
          "Op2",
          [ "t1", "op", "t2" ],
          [ "env" ],
          ".f7(subst(env, t1), env, op, t2)"
        ],
        [ "Var", [ "x" ], [ "env" ], "lookup(env, x)" ]
      ]
    ],
    [
      ".g14",
      [
        [
          "Cons",
          [ "t", "args" ],
          [ "env" ],
          "consOf(subst(env, t), substArgs(env, args))"
        ],
        [ "Nil", [], [ "env" ], "Nil()" ]
      ]
    ],
    [
      ".g15",
      [
        [
          "Case",
          [ "c", "params", "t", "cases" ],
          [ "env" ],
          "caseOf(c, params, subst(env, t), substCases(env, cases))"
        ],
        [ "Nil", [], [ "env" ], "Nil()" ]
      ]
    ],
    [
      ".g16",
      [
        [ "F", [], [ "env", "value", "x" ], "lookup(env, x)" ],
        [ "T", [], [ "env", "value", "x" ], "value" ]
      ]
    ],
    [
      ".g17",
      [
        [
          "Cell",
          [ "y", "value", "env" ],
          [ "x" ],
          ".g16(=(x, y), env, value, x)"
        ],
        [ "Nil", [], [ "x" ], "Panic(++(\"the variable is unbound: \", x))" ]
      ]
    ],
    [
      ".g18",
      [
        [
          "Cons",
          [ "value", "args" ],
          [ "env", "params", "x" ],
          "cellOf(x, value, bind(env, params, args))"
        ]
      ]
    ],
    [
      ".g19",
      [
        [
          "Cons",
          [ "x", "params" ],
          [ "args", "env" ],
          ".g18(args, env, params, x)"
        ],
        [ "Nil", [], [ "args", "env" ], "env" ]
      ]
    ],
    [
      ".g2",
      [
        [
          "Const",
          [ "t2Val" ],
          [ "op", "t1Val" ],
          "evalOp2(t1Val, op, t2Val)"
        ]
      ]
    ],
    [
      ".g20",
      [
        [
          "F",
          [],
          [ "f", "params", "rules", "t" ],
          "findRuleDefAux(f, rules)"
        ],
        [ "T", [], [ "f", "params", "rules", "t" ], "RuleDef(params, t)" ]
      ]
    ],
    [
      ".g21",
      [
        [
          "Nil", [], [ "f" ], "Panic(++(\"the function is undefined: \", f))"
        ],
        [
          "Rule",
          [ "f'", "params", "t", "rules" ],
          [ "f" ],
          ".g20(=(f, f'), f, params, rules, t)"
        ]
      ]
    ],
    [
      ".g22",
      [
        [ "F", [], [ "c", "cases", "params", "t" ], "findCaseDef(c, cases)" ],
        [ "T", [], [ "c", "cases", "params", "t" ], "CaseDef(params, t)" ]
      ]
    ],
    [
      ".g23",
      [
        [
          "Case",
          [ "c'", "params", "t", "cases" ],
          [ "c" ],
          ".g22(=(c, c'), c, cases, params, t)"
        ],
        [ "Nil", [], [ "c" ], "Panic(++(\"the case is undefined: \", c))" ]
      ]
    ],
    [
      ".g3",
      [
        [
          "Const",
          [ "t1Val" ],
          [ "env", "op", "t2" ],
          ".g2(eval(env, t2), op, t1Val)"
        ]
      ]
    ],
    [
      ".g4",
      [
        [
          "CaseDef",
          [ "params", "body" ],
          [ "args", "env" ],
          "eval(bind(env, params, args), body)"
        ]
      ]
    ],
    [
      ".g5",
      [
        [
          "CCall",
          [ "c", "args" ],
          [ "cases", "env" ],
          ".g4(findCaseDef(c, cases), args, env)"
        ]
      ]
    ],
    [
      ".g6",
      [
        [
          "CCall", [ "c", "args" ], [ "env" ], ".f1(substArgs(env, args), c)"
        ],
        [ "Const", [ "const" ], [ "env" ], "Const(const)" ],
        [
          "FCall",
          [ "f", "args" ],
          [ "env" ],
          ".g0(findRuleDef(f), args, env)"
        ],
        [
          "Let", [ "x", "t", "u" ], [ "env" ], ".f2(eval(env, t), env, u, x)"
        ],
        [
          "Match",
          [ "t", "cases" ],
          [ "env" ],
          ".g5(eval(env, t), cases, env)"
        ],
        [ "Op1", [ "op", "t" ], [ "env" ], ".g1(eval(env, t), op)" ],
        [
          "Op2",
          [ "t1", "op", "t2" ],
          [ "env" ],
          ".g3(eval(env, t1), env, op, t2)"
        ],
        [ "Var", [ "x" ], [ "env" ], "eval(Nil(), lookup(env, x))" ]
      ]
    ],
    [
      ".g7",
      [
        [
          "Cons",
          [ "t", "args" ],
          [ "env", "params", "x" ],
          "cellOf(x, eval(env, t), evalArgs(env, params, args))"
        ]
      ]
    ],
    [
      ".g8",
      [
        [
          "Cons",
          [ "x", "params" ],
          [ "args", "env" ],
          ".g7(args, env, params, x)"
        ],
        [ "Nil", [], [ "args", "env" ], "Nil()" ]
      ]
    ],
    [
      ".g9",
      [
        [ "I128", [], [ "tVal" ], "constOf(i128(tVal))" ],
        [ "I16", [], [ "tVal" ], "constOf(i16(tVal))" ],
        [ "I32", [], [ "tVal" ], "constOf(i32(tVal))" ],
        [ "I64", [], [ "tVal" ], "constOf(i64(tVal))" ],
        [ "I8", [], [ "tVal" ], "constOf(i8(tVal))" ],
        [ "U128", [], [ "tVal" ], "constOf(u128(tVal))" ],
        [ "U16", [], [ "tVal" ], "constOf(u16(tVal))" ],
        [ "U32", [], [ "tVal" ], "constOf(u32(tVal))" ],
        [ "U64", [], [ "tVal" ], "constOf(u64(tVal))" ],
        [ "U8", [], [ "tVal" ], "constOf(u8(tVal))" ]
      ]
    ]
  ]
]
