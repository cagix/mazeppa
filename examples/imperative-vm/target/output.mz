main(a) :=
    let x0 := f0("i", Cell("a", a, Cell("x", Int(7u32), Cell("out", Int(1i32),
    Cell("i", Int(7u32), Nil())))));
    let x1 := f1(x0);
    let x2 := match >(x1, 0u32) {
        F() -> Cell("a", a, Cell("x", Int(7u32), Cell("out", Int(1i32), Cell("i"
        , Int(7u32), Nil())))),
        T() ->
        let x2 := f0("out", Cell("a", a, Cell("x", Int(7u32), Cell("out", Int(
        1i32), Cell("i", Int(7u32), Nil())))));
        let x3 := f1(x2);
        let x4 := f0("a", Cell("a", a, Cell("x", Int(7u32), Cell("out", Int(1i32
        ), Cell("i", Int(7u32), Nil())))));
        let x5 := f1(x4);
        let x6 := While(GreaterThan(Var("i"), Int(0u32)), Cons(Assign("out", Mul
        (Var("out"), Var("a"))), Cons(Assign("i", Sub(Var("i"), Int(1u32))), Nil
        ())));
        let x7 := let x7 := Cons(Assign("i", Sub(Var("i"), Int(1u32))), Nil());
        let x8 := f2("out", x3, x5, Cell("a", a, Cell("x", Int(7u32), Cell("out"
        , Int(1i32), Cell("i", Int(7u32), Nil())))));
        f6(x8, x7);
        f10(x7, x6)
    };
    f0("out", x2);

f0(x0, x1) := match x1 {
    Cell(x2, x3, x4) -> match =(x0, x2) {
        F() -> f0(x0, x4),
        T() -> x3
    },
    Nil() -> Panic(++("the variable is unbound: ", x0))
};

f1(x0) := match x0 {
    Boolean(x1) -> Panic("want `Int(n)`, got `Boolean(b)`"),
    Int(x2) -> x2
};

f10(x0, x1) := match x1 {
    Assign(x2, x3) -> let x4 := f3(x0, x3); f5(x0, x2, x4),
    If(x5, x6, x7) ->
    let x8 := f3(x0, x5);
    let x9 := f8(x8);
    match x9 {
        F() -> f7(x0, x7),
        T() -> f7(x0, x6)
    },
    While(x10, x11) ->
    let x12 := f3(x0, x10); let x13 := f8(x12); f9(x0, x10, x11, x13)
};

f2(x0, x1, x2, x3) := match x3 {
    Cell(x4, x5, x6) -> match =(x0, x4) {
        F() -> let x7 := f2(x0, x1, x2, x6); Cell(x4, x5, x7),
        T() -> Cell(x4, Int(*(x1, x2)), x6)
    },
    Nil() -> Cell(x0, Int(*(x1, x2)), Nil())
};

f3(x0, x1) := match x1 {
    Boolean(x2) -> Boolean(x2),
    GreaterThan(x3, x4) ->
    let x5 := f4(x0, x3);
    let x6 := f1(x5); let x7 := f4(x0, x4); let x8 := f1(x7); Boolean(>(x6, x8))
    ,
    Int(x9) -> Int(x9),
    Mul(x10, x11) ->
    let x12 := f4(x0, x10);
    let x13 := f1(x12);
    let x14 := f4(x0, x11); let x15 := f1(x14); Int(*(x13, x15)),
    Sub(x16, x17) ->
    let x18 := f4(x0, x16);
    let x19 := f1(x18);
    let x20 := f4(x0, x17); let x21 := f1(x20); Int(-(x19, x21)),
    Var(x22) -> f0(x22, x0)
};

f4(x0, x1) := f3(x0, x1);

f5(x0, x1, x2) := match x0 {
    Cell(x3, x4, x5) -> match =(x1, x3) {
        F() -> let x6 := f5(x5, x1, x2); Cell(x3, x4, x6),
        T() -> Cell(x3, x2, x5)
    },
    Nil() -> Cell(x1, x2, Nil())
};

f6(x0, x1) := match x1 {
    Cons(x2, x3) -> let x4 := f10(x0, x2); f7(x4, x3),
    Nil() -> x0
};

f7(x0, x1) := f6(x0, x1);

f8(x0) := match x0 {
    Boolean(x1) -> x1,
    Int(x2) -> Panic("want `Boolean(b)`, got `Int(n)`")
};

f9(x0, x1, x2, x3) := match x3 {
    F() -> x0,
    T() ->
    let x4 := f7(x0, x2);
    let x5 := f3(x4, x1); let x6 := f8(x5); f9(x4, x1, x2, x6)
};
