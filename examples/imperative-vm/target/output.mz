main(a) :=
    let x0 := f0("i", Cell("a", a, Cell("x", Int(7u32), Cell("out", Int(1i32),
    Cell("i", Int(7u32), Nil())))));
    let x1 := f1(x0);
    let x2 := match >(x1, 0u32) {
        F() -> Cell("a", a, Cell("x", Int(7u32), Cell("out", Int(1i32), Cell("i"
        , Int(7u32), Nil())))),
        T() -> f9(While(GreaterThan(Var("i"), Int(0u32)), Cons(Assign("out", Mul
        (Var("out"), Var("a"))), Cons(Assign("i", Sub(Var("i"), Int(1u32))), Nil
        ()))), f5(Cons(Assign("i", Sub(Var("i"), Int(1u32))), Nil()), match Cell
        ("a", a, Cell("x", Int(7u32), Cell("out", Int(1i32), Cell("i", Int(7u32)
        , Nil())))) {
            Cell(x4, x5, x6) -> match =("out", x4) {
                F() ->
                let x7 := let x7 := Int(let x7 := f0("out", x6);
                let x8 := f1(x7);
                let x9 := match =("a", x4) {
                    F() -> f0("a", x6),
                    T() -> x5
                };
                let x10 := f1(x9); *(x8, x10));
                f2(x6, x7, "out");
                Cell(x4, x5, x7),
                T() -> Cell(x4, Int(let x8 := f1(x5);
                let x9 := match =("a", x4) {
                    F() -> f0("a", x6),
                    T() -> x5
                };
                let x10 := f1(x9); *(x8, x10)), x6)
            },
            Nil() -> Cell("out", Int(Panic(++("the variable is unbound: ", "out"
            ))), Nil())
        }))
    };
    f0("out", x2);

f0(x0, x1) := match x1 {
    Cell(x2, x3, x4) -> match =(x0, x2) {
        F() -> f0(x0, x4),
        T() -> x3
    },
    Nil() -> Panic(++("the variable is unbound: ", x0))
};

f1(x0) := match x0 {
    Boolean(x1) -> Panic("want `Int(n)`, got `Boolean(b)`"),
    Int(x2) -> x2
};

f2(x0, x1, x2) := match x0 {
    Cell(x3, x4, x5) -> match =(x2, x3) {
        F() -> let x6 := f2(x5, x1, x2); Cell(x3, x4, x6),
        T() -> Cell(x3, x1, x5)
    },
    Nil() -> Cell(x2, x1, Nil())
};

f3(x0, x1) := match x0 {
    Boolean(x2) -> Boolean(x2),
    GreaterThan(x3, x4) -> Boolean(let x5 := f4(x3, x1);
    let x6 := f1(x5); let x7 := f4(x4, x1); let x8 := f1(x7); >(x6, x8)),
    Int(x5) -> Int(x5),
    Mul(x6, x7) -> Int(let x8 := f4(x6, x1);
    let x9 := f1(x8); let x10 := f4(x7, x1); let x11 := f1(x10); *(x9, x11)),
    Sub(x8, x9) -> Int(let x10 := f4(x8, x1);
    let x11 := f1(x10); let x12 := f4(x9, x1); let x13 := f1(x12); -(x11, x13)),
    Var(x10) -> f0(x10, x1)
};

f4(x0, x1) := f3(x0, x1);

f5(x0, x1) := match x0 {
    Cons(x2, x3) -> let x4 := f9(x2, x1); f6(x3, x4),
    Nil() -> x1
};

f6(x0, x1) := f5(x0, x1);

f7(x0) := match x0 {
    Boolean(x1) -> x1,
    Int(x2) -> Panic("want `Boolean(b)`, got `Int(n)`")
};

f8(x0, x1, x2, x3) := match x2 {
    F() -> x3,
    T() ->
    let x4 := f6(x1, x3);
    let x5 := f3(x0, x4); let x6 := f7(x5); f8(x0, x1, x6, x4)
};

f9(x0, x1) := match x0 {
    Assign(x2, x3) -> let x4 := f3(x3, x1); f2(x1, x4, x2),
    If(x5, x6, x7) ->
    let x8 := f3(x5, x1);
    let x9 := f7(x8);
    match x9 {
        F() -> f6(x7, x1),
        T() -> f6(x6, x1)
    },
    While(x10, x11) ->
    let x12 := f3(x10, x1); let x13 := f7(x12); f8(x10, x11, x13, x1)
};
